name: Deploy to EC2 via Docker (Node 22)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: meet-ease-api
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/meet-ease-api
  CONTAINER_NAME: meet-ease-api
  PORT: 3000

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -e
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            IMAGE="${{ env.IMAGE_NAME }}:latest"
            echo "Pulling image $IMAGE"
            sudo docker pull "$IMAGE"

            # Create network if not exists
            sudo docker network create app-net || true

            # Run or restart container with env vars from /opt/${{ env.APP_NAME }}/.env
            sudo mkdir -p /opt/${{ env.APP_NAME }}

            if [ -f /opt/${{ env.APP_NAME }}/.env ]; then
              ENV_FILE="--env-file /opt/${{ env.APP_NAME }}/.env"
            else
              ENV_FILE=""
            fi

            # CORRE√á√ÉO: Stop and remove existing container FOR√áADAMENTE
            echo "üõë Cleaning up existing containers..."

            # Remove container pelo nome (for√ßa parada se necess√°rio)
            sudo docker rm -f ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "No container named ${{ env.CONTAINER_NAME }} to remove"

            # Remove qualquer container usando a porta 3000
            CONTAINERS_ON_PORT=$(sudo docker ps --filter "publish=3000" --format "{{.ID}}" 2>/dev/null || true)
            if [ ! -z "$CONTAINERS_ON_PORT" ]; then
              echo "Found containers using port 3000, removing them..."
              echo "$CONTAINERS_ON_PORT" | xargs -r sudo docker rm -f
            fi

            # Start new container
            echo "üöÄ Starting new container..."
            sudo docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              --network app-net \
              -p 3000:3000 \
              $ENV_FILE \
              "$IMAGE"

            # Verificar se subiu corretamente
            sleep 5
            if sudo docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "‚úÖ Container ${{ env.CONTAINER_NAME }} started successfully!"
            else
              echo "‚ùå Failed to start container!"
              sudo docker logs ${{ env